{"entries":[{"timestamp":1748589189962,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let array: any[] = []\nfor (let index = 0; index < 64; index++) {\n    array.push(0)\n}\n\nlet ccolors = [0xff0000, 0xFF7F00, 0xFFFE00, 0x7FFF00, 0x00FF00, 0x00FF7F,\n    0x00FFFE, 0x0040FF, 0x0000FF, 0x6000FF, 0xFE00FF, 0xFF0040]\n\n\nnamespace ledmatrix {\n    let size = 8;\n\n    let strip = neopixel.create(DigitalPin.C8, 64, NeoPixelMode.RGB)\n\n    /**\n    * Setzt die größe der LED-Matrix, und bestimmt damit, ob die vom Calliope verwendet wird, oder die externe.\n    */\n    //% blockId=LedMatrixSize block=\"set led-matrix size to %c %\"\n    //% block.loc.de=\"setze Größe der Led-Matrix auf %c %\"\n    //% c.defl=8\n    //% c.min=5 c.max=8\n    export function setLedMatrixSize(c: number) {\n        if (c <= 6) {\n            c = 5\n        }\n        if (c > 6) {\n            c = 8\n        }\n        size = c\n        let a: number[] = []\n        for (let index = 0; index < c * c; index++) {\n            a.push(0)\n        }\n        array = a\n    }\n\n    function byteToHex(n: number) {\n        const hexChars = \"0123456789ABCDEF\";\n        const high = Math.floor(n / 16);\n        const low = n % 16;\n        return hexChars.charAt(high) + hexChars.charAt(low);\n    }\n\n    function hexStringToNumber(hexString: string) {\n        let result = 0;\n        for (let i = 0; i < 6; i++) {\n            const digit = hexString.charCodeAt(i);\n            let value;\n            if (digit >= 48 && digit <= 57) {        // '0'-'9'\n                value = digit - 48;\n            } else if (digit >= 65 && digit <= 70) { // 'A'-'F'\n                value = digit - 55;\n            }\n            result = result * 16 + value;\n        }\n\n        return result;\n    }\n\n    function grayHexNumber(value: number) {\n        // Auf gültigen Bereich runden und begrenzen\n        let v = Math.round(value);\n        if (v < 0) v = 0;\n        if (v > 255) v = 255;\n\n        // Drei identische Bytes für Grau zusammenbauen\n        const h = byteToHex(v);\n        const hexString = h + h + h;\n\n        // Manuell in Zahl umwandeln (hex zu dezimal)\n        return hexStringToNumber(hexString)\n    }\n\n    //% blockId=LedMatrixShow block=\"show array on leds\"\n    //% block.loc.de=\"zeige Array auf LEDs\"\n    export function show() {\n        if (size == 5) {\n            for (let index = 0; index < 25; index++) {\n\n            }\n        } else if (size == 8) {\n            for (let index = 0; index < 64; index++) {\n                if (typeof array[index] == \"number\") {\n                    strip.setPixelColor(index, grayHexNumber(array[index]))\n                } else if (typeof array[index] == \"string\") {\n                    strip.setPixelColor(index, hexStringToNumber(array[index]))\n                }\n            }\n            strip.show()\n        }\n    }\n\n    export function showBlack() {\n        strip.showColor(neopixel.colors(NeoPixelColors.Black))\n        strip.show()\n    }\n\n}\n\nledmatrix.showBlack()\n\nfor (let index = 0; index < 64; index++) {\n    array[index] = 20\n}\n\narray[8] = \"FF0000\"\n\nledmatrix.show()\n\nbasic.forever(function () {\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":3008,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"v3\": \"*\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n"],[1,""],[0,"    "]],"start1":84,"start2":84,"length1":88,"length2":9},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":181,"start2":181,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"}]}],"snapshots":[{"timestamp":1748589189961,"editorVersion":"7.0.3","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Array2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1748589781520}